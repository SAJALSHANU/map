<------------------- Terraform -------------->
Steps: Create an inst -> terra-server(name) 12 gp3 -> launch inst
Term1:
    1  rpmquery terraform
    2  ls -a
    3  sudo yum install -y yum-utils
    4  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    5  sudo yum -y install terraform
    6  terraform -v
    7  mkdir /terra-code
    8  cd /terra-code/
    9  ls
   10  vim provider.tf
// write this in provider.tf file
provider "aws" {
  region     = "us-east-1"
  access_key = "AKIAUFIWANBPJDXUHKHK"
  secret_key = "ABuyLCl4lMnjIwNoICIOGatF2UMV+ZoVnqf4rvYc"
}
resource "aws_instance" "terra-example" {
  ami           = "ami-00ca32bbc84273381"
  instance_type = "t2.micro"

  tags = {
    Name = "Indian-server"
  }
}

Term1:
   13  ls -a
   14  terraform validate
   15  terraform init
   16  terraform validate
   17  ls -a
   18  tree -a
   19  yum install tree -y
   20  terraform validate
   21  tree -a
   22  terraform fmt
   23  terraform plan
   24  terraform apply
   25  terraform destroy


<------------- Terraform with SG ------------->
//Write this inside provider.tf
provider "aws" {
  region = "us-east-1"
}

resource "aws_security_group" "sajal-sg" {
  name        = "sajal-sg"
  description = "allow ssh and http"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "web-server" {
  ami               = "ami-00ca32bbc84273381"
  availability_zone = "us-east-1a"
  instance_type     = "t2.micro"
  security_groups   = ["${aws_security_group.sajal-sg.name}"]
  tags = {
    Name     = "hello-World"
    Stage    = "testing"
    Location = "us"
  }
}


<------------------------- Terraform with existing SG ------------------>

//Write this code inside provider.tf

data "aws_security_group" "sajal-sg" {
  id = "sg-081475035c9db7008" #existing security group id
}

#code for elastic ip
resource "aws_eip" "sajal-eip" {
  instance = aws_instance.saj-server.id
}

#inject my ssh-key
resource "aws_key_pair" "terra_key" {
  key_name   = "terra_key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDLDiokZbEMwy/SlbYqNyvgxCxycPJHMvverOm6N+65KIsjljWiOjk/iCCBifEdzTFnYxss+W3j+JrRsMiOQutpukRUN/xecxlQzu2lRee66jYJUA4V76in2KjJllgHlAYUs3WgE8Dh7uGNY+WtZLqjerR//nXukxCLtiH2v7YPQ/g1lUcr1d402WSW5TSRTeJW/1/kH2lEUfvqdkABDIcU/K4dX8u8jA0qhShlv4LB79d04zTVGEvkQLEhZdhWapRnpFV4CjGmz/H83bzZVzPhOHM4S9J/BoS3pPHMzPNWyFCpWkHZg470aBH3vfOktwIPhhy/+bLluv71XQJhCkNntneXuZzwbTrm+FdXi7va9qP8XrvdWzwYN3Y6ucj4bXaCVMtIE1OonhpvzFy05zz2edrxYyo68N81yZWKACO1R+X+DsGcIJushYelPYgIGqupe7eRIHPze/lpypK5QkOhuZ7ubRDerMH/QcodD/9uCI6gMraU4G6Tx+cyR/kiPiU= root@terraform.example.com"
}

resource "aws_instance" "saj-server" {
  ami                    = "ami-00ca32bbc84273381"
  availability_zone      = "us-east-1a"
  instance_type          = "t2.micro"
  key_name               = "terra_key"
  vpc_security_group_ids = [data.aws_security_group.sajal-sg.id]
  /* First of generate ssh key and share public ssh key with AWS
   and you can execute code*/

  #root disk
  root_block_device {
    volume_size           = "10"
    volume_type           = "gp2"
    delete_on_termination = true
  }

  #additional data disk
  ebs_block_device {
    device_name           = "/dev/xvdb"
    volume_size           = "5"
    volume_type           = "gp2"
    delete_on_termination = true
  }

  user_data = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>sample webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF

  tags = {
    Name     = "sajal-server"
    Stage    = "testing"
    Location = "India"
  }
}



<---------------------- KOPS --------------------->


Steps: Create an inst with 10 gp2 -> 
Term:
  1  yum install unzip -y
    2  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    3  unzip awscliv2.zip
    4  sudo ./aws/install
    5  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    6  sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    7  kubectl version --client
    8  curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
    9  chmod +x ./kops
   10  sudo mv ./kops /usr/local/bin/

Step: Create an IAM user/role with Route53, EC2, IAM and S3 full access, administrator access -> configure aws in terminali> create role and give route53 and s3fullaccess -> go to inst -> attach role in action -> security-> modify i am role -> go to route53 in aws -> registered domains -> hosted zones -> give name -> private -> choose own region -> choose own vpc -> create -> DNS name and S3 bucket name should be same

Term:
    1  aws configure
    2   aws s3 mb s3://dev.k8s.sajal2003shanu.in    --> to create s3 bucket
    3  aws s3 ls
    4  ssh-keygen
    5   export KOPS_STATE_STORE=s3://dev.k8s.sajal2003shanu.in
    6   kops create cluster --cloud=aws --zones=us-east-1a --name=dev.k8s.sajal2003shanu.in --dns-zone=sajal2003shanu.in --dns private
    7  kops get cluster
    8  kops delete cluster sajal2003shanu.in --yes

<-------------------------------- Custom-VPC (Terraform) --------------->
//write this inside network.tf file and add ssh key portion inside this file
resource "aws_vpc" "prod-vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "prod-vpc"
  }
}

##Create IGW for VPC
resource "aws_internet_gateway" "prod-igw" {
  vpc_id = aws_vpc.prod-vpc.id

  tags = {
    Name = "prod-vpc"
  }
}

##Create public subnet
resource "aws_subnet" "public-subnet" {
  vpc_id            = aws_vpc.prod-vpc.id
  availability_zone = "us-east-1a"
  cidr_block        = "10.0.0.0/24"

  tags = {
    Name = "public-subnet"
  }
}

##Create private subnet
resource "aws_subnet" "private-subnet" {
  vpc_id            = aws_vpc.prod-vpc.id
  availability_zone = "us-east-1a"
  cidr_block        = "10.0.1.0/24"
  tags = {
    Name = "private-subnet"

  }
}
##Create security groups
resource "aws_security_group" "sajal-sg" {
  name        = "sajal-sg"
  vpc_id      = aws_vpc.prod-vpc.id
  description = "allow ssh and http"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

##Create public route table
resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.prod-vpc.id
  route {
    cidr_block = "0.0.0.0/24"
    gateway_id = aws_internet_gateway.prod-igw.id
  }
  tags = {
    Name = "public-rt"
  }
}

## Route table association code
resource "aws_route_table_association" "public-asso" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}
## ec2 code
resource "aws_instance" "sajal-vpc-serv" {
  ami             = "ami-00ca32bbc84273381"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.sajal-sg.id}"]
  key_name        = "terra_key"
  tags = {
    Name     = "sajal-vpc-serv"
    Stage    = "testing"
    Location = "us"
  }
}

## create an eip of ec2
resource "aws_eip" "sajal-ec2-eip" {
  instance = aws_instance.sajal-vpc-serv.id
}

##This is db ec2 code
resource "aws_instance" "database-server" {
  ami             = "ami-00ca32bbc84273381"
  subnet_id       = aws_subnet.private-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.sajal-sg.id}"]
  key_name        = "terra_key"
  tags = {
    Name     = "db-World"
    Stage    = "stage-base"
    Location = "us"
  }
}
## create a public ip for NAT Gateway
resource "aws_eip" "nat-eip" {
}
### create Nat gateway
resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id
}

#create private route table
resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.prod-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my-ngw.id
  }


  tags = {
    Name = "private-rt"
  }
}

##route Tatable assosication code
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}



   